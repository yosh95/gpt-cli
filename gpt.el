(defun gpt ()
  (interactive)
  (let* ((output-buffer-name "*GPT Output*")
         (output-buffer (get-buffer-create output-buffer-name))
         (original-window (selected-window)))
    (if (use-region-p)
        (let* ((start (region-beginning))
               (end (region-end))
               (region-text (buffer-substring start end))
               (temp-file (make-temp-file "emacs-region-")))
          (with-temp-file temp-file
            (insert region-text))
          (let* ((arg (read-string "Additional prompt: "))
                 (command (format "python3 ~/gpt/gpt.py -m 4 -b -q -c 10000 -p '%s' %s" arg temp-file))
                 (command-output (shell-command-to-string command)))
            (with-current-buffer output-buffer
              (goto-char (point-max))
              (insert "----\n(User) " arg "\n(GPT) " command-output))
            (delete-file temp-file)))
      (let* ((arg (read-string "Prompt: "))
             (command (format "python3 ~/gpt/gpt.py -m 4 '%s'" arg))
             (command-output (shell-command-to-string command)))
        (with-current-buffer output-buffer
          (goto-char (point-max))
          (insert "----\n(User) " arg "\n(Assistant) " command-output))))
    (if (not (get-buffer-window output-buffer 'visible))
        (let ((new-window (split-window-vertically)))
          (set-window-buffer new-window output-buffer)
          (select-window new-window))
      (display-buffer output-buffer))))
